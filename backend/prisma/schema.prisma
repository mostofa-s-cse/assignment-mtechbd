generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  email    String  @unique
  phone    String  @unique
  name     String?
  password String

  status                  String?   @default("PENDING")
  userWeight              Int?      @default(2)
  isMfaEnabled            Boolean?  @default(false)
  loginAttempts           Int?      @default(0)
  isPasswordValid         Boolean?  @default(false)
  isPasswordResetRequired Boolean?  @default(true)
  lastPasswordResetDate   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId   Int
  roleInfo Roles @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Roles {
  id      Int     @id @default(autoincrement())
  role    String
  context String
  Users   Users[]

  @@map("roles")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  weight      Float
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  OrderItems OrderItem[]
}

model Promotion {
  id            Int      @id @default(autoincrement())
  title         String
  type          String // "percentage" | "fixed" | "weighted"
  startDate     DateTime
  endDate       DateTime
  discountValue Float? // Optional discount value
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  PromotionSlabs PromotionSlab[] // Relationship to PromotionSlab

  @@map("promotions")
}

model PromotionSlab {
  id              Int   @id @default(autoincrement())
  promotionId     Int
  minWeight       Float
  maxWeight       Float
  discountPerUnit Float

  Promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_slabs")
}

model Order {
  id            Int      @id @default(autoincrement())
  customerName  String
  customerEmail String
  subtotal      Float
  totalDiscount Float
  grandTotal    Float
  createdAt     DateTime @default(now())

  OrderItems OrderItem[]
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  weight     Float // Total weight (product weight Ã— quantity)
  discount   Float // Total discount for this product
  totalPrice Float // Final price after discount

  Order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
